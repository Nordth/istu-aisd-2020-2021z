using System;
using System.Collections;

namespace UnidirectionalList
{
    public class Item
    {
        public int Value { get; set; }
        public Item Next { get; set; }


        public Item(int value)
        {
            Value = value;
            Next = null;
        }


        public Item(int value, Item next): this(value)
        {
            Next = next;
        }

    }

    public class LinkedList<T> : IEnumerable
    {
        private Item head;
        private Item tail;
        public int count;

        public LinkedList()
        {
           head = null;
           tail = null;
           count = 0;
        }

        public void AddNewElem(int elem)
        {
           var item = new Item(elem);
           if(head == null)
           {
                head = item;
           }
           else
           {
                tail.Next = item;
           }
           tail = item;
           count++;
        }

        public void Remove(int elem)
        {
            if(head != null)
            {
                if (head.Value.Equals(elem))
                {
                    head = head.Next;
                    count--;
                    return;
                }
                var curent = head.Next;
                var previos = head;
                while(curent != null)
                {
                    if (curent.Value.Equals(elem))
                    {
                        previos.Next = curent.Next;
                        count--;
                        return;
                    }
                    previos = curent;
                    curent = curent.Next;
                }
            } 
        }

        public void InsertAfter(int target, int elem)
        {
            if (head != null)
            {
                var curent = head;
                var item = new Item(elem);
                while (curent != null)
                {
                    if (curent.Value.Equals(target))
                    {
                        item.Next = curent.Next;
                        curent.Next = item;
                        count++;
                        return;
                    }
                    else
                    {
                        curent = curent.Next;
                    }
                }
            }
               
        }

        public void InsertBeforeIndex(int index, int elem)
        {
            if (head != null)
            {
                var curent = head.Next;
                var previos = head;
                if(index == 0)
                {
                    var item = new Item(elem);
                    item.Next = head;
                    head = item;
                    if (count == 0) head = head.Next;
                    count++;
                }
                else if(index < count)
                {
                    int i = 1;
                    while (i < index)
                    {
                            previos = curent;
                            curent = curent.Next;
                            i++;
                    }
                    var insertBeforeElem = previos.Value;
                    InsertAfter(insertBeforeElem, elem);
                    return;
                }
                else if(index == count)
                {
                    AddNewElem(elem);
                }
            }
        }

        public void Clear()
        {
            head = null;
            count = 0;
        }

        public IEnumerator GetEnumerator()
        {
            var data = head;
            while(data != null)
            {
                yield return data.Value;
                data = data.Next;
            }
        }

        public int GetElementByIndex(int index)
        {
            if (head != null)
            {
                var curent = head.Next;
                var previos = head;
                if(index == 0)
                {
                    Console.WriteLine(previos.Value);
                    return previos.Value;
                }
                else if(index <= count-1)
                {
                    int i = 0;
                    while (i < index)
                    {
                        previos = curent;
                        curent = curent.Next;
                        i++;
                    }        
                    Console.WriteLine(previos.Value);
                    return previos.Value;
                }
                else
                {
                    Console.WriteLine("Элемента с индексом " + index + " не существует!");
                }   //return previos.Value;
            }
            else Console.WriteLine("Список пуст");
            return 0;
        } 
    }


    class Program
    {
        private static void Main(string[] args)
        {
            var list = new LinkedList<int>();
            list.AddNewElem(1);
            list.AddNewElem(2);
            list.AddNewElem(3);
            list.AddNewElem(4);
            list.AddNewElem(5);
            foreach(var item in list)
            {
                Console.Write(item + " ");
            }
            Console.WriteLine();
            list.Remove(2);
            foreach (var item in list)
            {
                Console.Write(item + " ");
            }
            Console.WriteLine();
             list.InsertBeforeIndex(0, 8);
            foreach (var item in list)
            {
                Console.Write(item + " ");
            }
            Console.WriteLine();
            list.InsertAfter(8, 22);
            foreach (var item in list)
            {
                Console.Write(item + " ");
            }
            Console.WriteLine();
            list.GetElementByIndex(6);
            list.GetElementByIndex(1);
            list.Clear();
            foreach (var item in list)
            {
                Console.Write(item + " ");
            }
        }
    }
}
